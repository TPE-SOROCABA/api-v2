# Etapa de build
FROM node:22 as builder

WORKDIR /app


# Copie os arquivos necessários para instalar as dependências
COPY package*.json ./

# Instale dependências
RUN npm ci --quiet

# Copie o código fonte para a imagem
COPY . .
# Execute o comando de build
RUN npx prisma generate
RUN npm run build

# Etapa final para produção
FROM node:22-alpine

WORKDIR /app

# Configurar timezone
ENV TZ=America/Sao_Paulo

# Instale dependências do sistema (incluindo Tesseract OCR e ferramentas de build)
RUN apk add --no-cache \
    graphicsmagick \
    ghostscript \
    openssl \
    tesseract-ocr \
    tesseract-ocr-data-por \
    python3 \
    py3-pip \
    py3-opencv \
    wget \
    cmake \
    make \
    gcc \
    g++ \
    musl-dev \
    tzdata

# Configurar timezone do sistema
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Copie os arquivos necessários para rodar a aplicação
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/ocr_extractor.py ./ocr_extractor.py
COPY package*.json ./

# Criar pasta do tessdata (caso não exista)
RUN mkdir -p /usr/share/tessdata

RUN mkdir -p /app/uploads

# Baixar manualmente o idioma Latim
RUN wget -O /usr/share/tessdata/Latin.traineddata \
    https://github.com/tesseract-ocr/tessdata/raw/main/script/Latin.traineddata

# Criar ambiente virtual Python e ativá-lo
RUN python3 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Instalar pytesseract no ambiente virtual
RUN pip install --no-cache-dir pytesseract

# Instale apenas dependências de produção
RUN npm ci --only=prod --quiet

RUN npx prisma generate
# Comando de inicialização
CMD [ "npm", "run", "start:prod" ]
