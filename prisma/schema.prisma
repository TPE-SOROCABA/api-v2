generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Participants {
  id                      String                    @id @default(uuid())
  name                    String
  cpf                     String?                   @unique
  phone                   String                    @unique
  profile_photo           String?
  profile                 ParticipantProfile        @default(PARTICIPANT)
  computed                String?
  sex                     ParticipantSex
  email                   String?                   @unique
  AssignmentsParticipants AssignmentsParticipants[]
  Auth                    Auth?
  Groups                  Groups[]
  IncidentParticipant     IncidentHistories[]       @relation("ParticipantRelation")
  IncidentReporter        IncidentHistories[]       @relation("ReporterRelation")
  ParticipantsGroup       ParticipantsGroups[]

  @@map("participants")
}

model ParticipantsGroups {
  id            String       @id @default(uuid())
  participantId String       @map("participant_id")
  groupId       String       @map("group_id")
  group         Groups       @relation(fields: [groupId], references: [id])
  participant   Participants @relation(fields: [participantId], references: [id])

  @@map("participants_groups")
}

model Auth {
  id                String       @id @default(uuid())
  password          String
  resetPasswordCode String?      @map("reset_password_code")
  participantId     String       @unique @map("participant_id")
  expiredAt         DateTime?    @map("expired_at")
  updatedAt         DateTime     @default(now()) @updatedAt @map("updated_at")
  participant       Participants @relation(fields: [participantId], references: [id])

  @@map("auths")
}

model IncidentHistories {
  id            String         @id @default(uuid())
  participantId String         @map("participant_id")
  reporterId    String         @map("reporter_id")
  designationId String         @map("designation_id")
  reason        String
  status        IncidentStatus
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  designation   Designations   @relation(fields: [designationId], references: [id])
  participant   Participants   @relation("ParticipantRelation", fields: [participantId], references: [id])
  reporter      Participants   @relation("ReporterRelation", fields: [reporterId], references: [id])

  @@unique([participantId, designationId])
  @@map("incident_histories")
}

model Point {
  id                   String                 @id @default(uuid())
  name                 String
  locationPhoto        String?                @map("location_photo")
  Assignments          Assignments[]
  PointPublicationCart PointPublicationCart[]

  @@map("points")
}

model PublicationCart {
  id                         String                       @id @default(uuid())
  name                       String
  description                String?
  themePhoto                 String?                      @map("theme_photo")
  AssignmentsPublicationCart AssignmentsPublicationCart[]
  PointPublicationCart       PointPublicationCart[]

  @@map("publication_carts")
}

model PointPublicationCart {
  id                String          @id @default(uuid())
  pointId           String          @map("point_id")
  minParticipants   Int             @map("min_participants")
  maxParticipants   Int             @map("max_participants")
  status            Boolean
  publicationCartId String          @map("publication_cart_id")
  groupId           String          @map("group_id")
  group             Groups          @relation(fields: [groupId], references: [id])
  point             Point           @relation(fields: [pointId], references: [id])
  publicationCarts  PublicationCart @relation(fields: [publicationCartId], references: [id])

  @@map("point_publication_carts")
}

model Groups {
  id                   String                 @id @default(uuid())
  name                 String
  config_end_hour      String                 @map("config_end_hour")
  config_max           Int                    @map("config_max")
  config_min           Int                    @map("config_min")
  config_start_hour    String                 @map("config_start_hour")
  config_weekday       Weekday                @map("config_weekday")
  coordinatorId        String?                @map("coordinator_id")
  Designations         Designations[]
  EventDayGroup        EventDayGroups[]
  coordinator          Participants?          @relation(fields: [coordinatorId], references: [id])
  ParticipantsGroup    ParticipantsGroups[]
  PointPublicationCart PointPublicationCart[]

  @@map("groups")
}

model EventDay {
  id            String           @id @default(uuid())
  name          String
  description   String
  type          EventType
  status        EventStatus
  weekday       Weekday
  EventDayGroup EventDayGroups[]

  @@map("event_days")
}

model EventDayGroups {
  id         String   @id @default(uuid())
  eventDayId String   @map("event_day_id")
  groupId    String   @map("group_id")
  eventDay   EventDay @relation(fields: [eventDayId], references: [id])
  group      Groups   @relation(fields: [groupId], references: [id])

  @@map("event_days_groups")
}

model Designations {
  id                        String              @id @default(uuid())
  groupId                   String              @map("group_id")
  createdAt                 DateTime            @default(now()) @map("created_at")
  updatedAt                 DateTime            @updatedAt @map("updated_at")
  name                      String
  status                    DesignationStatus
  cancellationJustification String?             @map("cancellation_justification")
  mandatoryPresence         Boolean             @default(true) @map("mandatory_presence")
  designationDate           DateTime            @default(now()) @map("designation_date")
  designationEndDate        DateTime            @default(now()) @map("designation_end_date")
  assignments               Assignments[]
  group                     Groups              @relation(fields: [groupId], references: [id])
  IncidentHistories         IncidentHistories[]

  @@map("designations")
}

model AssignmentsParticipants {
  id            String       @id @default(uuid())
  assignmentId  String       @map("assignment_id")
  participantId String       @map("participant_id")
  assignment    Assignments  @relation(fields: [assignmentId], references: [id])
  participant   Participants @relation(fields: [participantId], references: [id])

  @@map("assignments_participants")
}

model AssignmentsPublicationCart {
  id                String          @id @default(uuid())
  assignmentId      String          @map("assignment_id")
  publicationCartId String          @map("publication_cart_id")
  assignment        Assignments     @relation(fields: [assignmentId], references: [id])
  publicationCart   PublicationCart @relation(fields: [publicationCartId], references: [id])

  @@map("assignments_publication_carts")
}

model Assignments {
  id                         String                       @id @default(uuid())
  pointId                    String                       @map("point_id")
  config_min                 Int                          @map("config_min")
  config_max                 Int                          @map("config_max")
  config_status              Boolean                      @map("config_status")
  designationsId             String                       @map("designations_id")
  Designations               Designations                 @relation(fields: [designationsId], references: [id])
  point                      Point                        @relation(fields: [pointId], references: [id])
  AssignmentsParticipants    AssignmentsParticipants[]
  AssignmentsPublicationCart AssignmentsPublicationCart[]

  @@map("assignments")
}

enum ParticipantProfile {
  COORDINATOR
  ASSISTANT_COORDINATOR
  CAPTAIN
  ASSISTANT_CAPTAIN
  PARTICIPANT
  ADMIN_ANALYST
}

enum IncidentStatus {
  OPEN
  CLOSED
  CANCELLED
  IGNORED
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum DesignationStatus {
  OPEN
  CANCELLED
  CLOSED
  IN_PROGRESS
  ARCHIVED
}

enum EventStatus {
  OPEN
  CLOSED
}

enum EventType {
  RECURRING
  SPECIAL
  ADDITIONAL
}

enum ParticipantSex {
  MALE
  FEMALE
}

enum PetitionStatus {
  CREATED
  WAITING_INFORMATION
  COMPLETE
}
