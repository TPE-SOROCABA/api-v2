generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

// https://github.com/prisma/prisma/discussions/22439
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Participants {
  id                String              @id @default(uuid())
  name              String
  phone             String              @unique
  email             String              @unique
  profilePhoto      String?             @map("profile_photo")
  profile           ParticipantProfile? @default(PARTICIPANT)
  computed          String?
  sex               ParticipantSex
  address           String?             @map("address")
  attributions      String[]            @map("attributions")
  availability      Json[]              @map("availability")
  baptismDate       DateTime?           @map("baptism_date")
  birthDate         DateTime?           @map("birth_date")
  city              String?             @map("city")
  congregationId    Int?                @map("congregation_id")
  hasMinorChild     Boolean?            @map("has_minor_child")
  languages         String[]            @map("languages")
  petitionId        String?             @map("petition_id")
  spouseParticipant Boolean?            @map("spouse_participant")
  state             String?             @map("state")
  zipCode           String?             @map("zip_code")
  cpf               String?
  civilStatus       CivilStatus?        @map("civil_status")

  congregation            Congregations?            @relation(fields: [congregationId], references: [id])
  assignmentsParticipants AssignmentsParticipants[]
  auth                    Auth?
  groups                  Groups[]
  incidentParticipant     IncidentHistories[]       @relation("ParticipantRelation")
  incidentReporter        IncidentHistories[]       @relation("ReporterRelation")
  petitions               Petitions?                @relation(fields: [petitionId], references: [id])
  participantsGroup       ParticipantsGroups[]

  @@map("participants")
}

model ParticipantsGroups {
  id            String                  @id @default(uuid())
  participantId String                  @map("participant_id")
  groupId       String                  @map("group_id")
  profile       ParticipantGroupProfile @default(PARTICIPANT)

  group       Groups       @relation(fields: [groupId], references: [id])
  participant Participants @relation(fields: [participantId], references: [id])

  @@map("participants_groups")
}

model Auth {
  id                String    @id @default(uuid())
  password          String
  resetPasswordCode String?   @map("reset_password_code")
  participantId     String    @unique @map("participant_id")
  expiredAt         DateTime? @map("expired_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")

  participant Participants @relation(fields: [participantId], references: [id])

  @@map("auths")
}

model IncidentHistories {
  id            String         @id @default(uuid())
  participantId String         @map("participant_id")
  reporterId    String         @map("reporter_id")
  designationId String         @map("designation_id")
  reason        String
  status        IncidentStatus
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  designation   Designations   @relation(fields: [designationId], references: [id])
  participant   Participants   @relation("ParticipantRelation", fields: [participantId], references: [id])
  reporter      Participants   @relation("ReporterRelation", fields: [reporterId], references: [id])

  @@unique([participantId, designationId])
  @@map("incident_histories")
}

model Point {
  id                   String                 @id @default(uuid())
  name                 String
  locationPhoto        String?                @map("location_photo")
  assignments          Assignments[]
  pointPublicationCart PointPublicationCart[]

  @@map("points")
}

model PublicationCart {
  id          String  @id @default(uuid())
  name        String
  description String?
  themePhoto  String? @map("theme_photo")

  assignmentsPublicationCart AssignmentsPublicationCart[]
  pointPublicationCart       PointPublicationCart[]

  @@map("publication_carts")
}

model PointPublicationCart {
  id                String  @id @default(uuid())
  pointId           String  @map("point_id")
  minParticipants   Int     @map("min_participants")
  maxParticipants   Int     @map("max_participants")
  status            Boolean
  publicationCartId String  @map("publication_cart_id")
  groupId           String  @map("group_id")

  group            Groups          @relation(fields: [groupId], references: [id])
  point            Point           @relation(fields: [pointId], references: [id])
  publicationCarts PublicationCart @relation(fields: [publicationCartId], references: [id])

  @@map("point_publication_carts")
}

model Groups {
  id              String  @id @default(uuid())
  name            String
  configEndHour   String  @map("config_end_hour")
  configMax       Int     @map("config_max")
  configMin       Int     @map("config_min")
  configStartHour String  @map("config_start_hour")
  configWeekday   Weekday @map("config_weekday")
  coordinatorId   String? @map("coordinator_id")

  // Aqui adicionamos uma coluna JSON
  additionalInfo Json?       @map("additional_info")
  type           GroupType   @default(MAIN)
  status         GroupStatus @default(OPEN)

  designations         Designations[]
  eventDayGroup        EventDayGroups[]
  coordinator          Participants?          @relation(fields: [coordinatorId], references: [id])
  participantsGroup    ParticipantsGroups[]
  pointPublicationCart PointPublicationCart[]

  @@map("groups")
}

model EventDay {
  id          String      @id @default(uuid())
  name        String
  description String
  type        EventType
  status      EventStatus
  weekday     Weekday

  eventDayGroup EventDayGroups[]

  @@map("event_days")
}

model EventDayGroups {
  id         String @id @default(uuid())
  eventDayId String @map("event_day_id")
  groupId    String @map("group_id")

  eventDay EventDay @relation(fields: [eventDayId], references: [id])
  group    Groups   @relation(fields: [groupId], references: [id])

  @@map("event_days_groups")
}

model Designations {
  id                        String            @id @default(uuid())
  groupId                   String            @map("group_id")
  createdAt                 DateTime          @default(now()) @map("created_at")
  updatedAt                 DateTime          @updatedAt @map("updated_at")
  name                      String
  status                    DesignationStatus
  cancellationJustification String?           @map("cancellation_justification")
  mandatoryPresence         Boolean           @default(true) @map("mandatory_presence")
  designationDate           DateTime          @default(now()) @map("designation_date")
  designationEndDate        DateTime          @default(now()) @map("designation_end_date")

  assignments       Assignments[]
  group             Groups              @relation(fields: [groupId], references: [id])
  incidentHistories IncidentHistories[]

  @@map("designations")
}

model AssignmentsParticipants {
  id            String @id @default(uuid())
  assignmentId  String @map("assignment_id")
  participantId String @map("participant_id")

  assignment  Assignments  @relation(fields: [assignmentId], references: [id])
  participant Participants @relation(fields: [participantId], references: [id])

  @@map("assignments_participants")
}

model AssignmentsPublicationCart {
  id                String @id @default(uuid())
  assignmentId      String @map("assignment_id")
  publicationCartId String @map("publication_cart_id")

  assignment      Assignments     @relation(fields: [assignmentId], references: [id])
  publicationCart PublicationCart @relation(fields: [publicationCartId], references: [id])

  @@map("assignments_publication_carts")
}

model Assignments {
  id             String  @id @default(uuid())
  pointId        String  @map("point_id")
  config_min     Int     @map("config_min")
  config_max     Int     @map("config_max")
  config_status  Boolean @map("config_status")
  designationsId String  @map("designations_id")

  designations               Designations                 @relation(fields: [designationsId], references: [id])
  point                      Point                        @relation(fields: [pointId], references: [id])
  assignmentsParticipants    AssignmentsParticipants[]
  assignmentsPublicationCart AssignmentsPublicationCart[]

  @@map("assignments")
}

model Petitions {
  id         String         @id @default(uuid())
  name       String
  protocol   String         @unique
  status     PetitionStatus @default(CREATED)
  publicUrl  String         @map("public_url")
  privateUrl String         @map("private_url")
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  participants Participants[]

  @@map("petitions")
}

model Congregations {
  id    Int    @id @default(autoincrement())
  name  String
  city  String
  state String

  participants Participants[]

  @@map("congregations")
}

enum ParticipantProfile {
  COORDINATOR
  ASSISTANT_COORDINATOR
  CAPTAIN // deprecated
  ASSISTANT_CAPTAIN // deprecated
  PARTICIPANT // deprecated
  ADMIN_ANALYST
}

enum ParticipantGroupProfile {
  CAPTAIN
  ASSISTANT_CAPTAIN
  PARTICIPANT
}

enum IncidentStatus {
  OPEN
  CLOSED
  CANCELLED
  IGNORED
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum DesignationStatus {
  OPEN
  CANCELLED
  CLOSED
  IN_PROGRESS
  ARCHIVED
}

enum EventStatus {
  OPEN
  CLOSED
}

enum EventType {
  RECURRING
  SPECIAL
  ADDITIONAL
}

enum GroupType {
  MAIN
  ADDITIONAL
  SPECIAL
}

enum GroupStatus {
  OPEN
  CLOSED
}

enum ParticipantSex {
  MALE
  FEMALE
}

enum PetitionStatus {
  CREATED
  WAITING_INFORMATION
  WAITING
  ACTIVE
  SUSPENDED
  EXCLUDED
  INACTIVE
  EXPIRED
  TEMPORARY
}

enum CivilStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}
